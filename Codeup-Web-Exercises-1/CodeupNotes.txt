7/31/2020
CSS II Media Query

Fixed layout: coded in hard pixel values
Fluid layout: percentages are used to change sizes, but not based on screen size
Responsive layout: Using media queries, the layout of the page changes based on screen size

Media Queries?
	Features of CSS3 allows content to render differently to adapt to different conditions like screen resolution

<meta name="viewport content" width=device-width, initial-scale=1.0;>

Viewport: visible area of a web page
	initial-scale=1.0 sets initial zoom level when first page is loaded

@media rule
How media queries are invoked in CSS
@media only screen and (max-width: 600px) {
body {
		Back-ground-color: lightblue;
	}
}

Syntax
@media not | only mediatype and (mediafeature and|or|not mediafeature) {
	CSS-code;
}


Media Types
	All
	Print
	Screen
	Speech reads the screen.

	<style>
		@media screen and (max-width: 600px) {
			#narrow {
				height: 300px;
				background-color: #0f66f4;
				size : 96%
			}
			#wide {
				display: none;
			}
		}
		@media screen and (min-width: 601px) {
			#wide {
				height: 300px;
				background-color: #1e7e34;
			}
			#narrow {
				display: none;
			}
		}
	</style>

Breakpoints
Points where the content breaks off because of change to width
Set by mediafeature in the @media rule

Mobile first approach
Writing for mobile first
Writing for larger screens first is hard because breaking the design for smaller screens is more difficult

***Git Notes
git status shows current directory
git branch
at first only master branch
git checkout - b flexbox-lec
    switches to flexbox-lec

Get new repository
Git remote add origin (link for github repository)

Push changes to remote repository
git add .
git commit -m "stuff"
git push origin master



8/03/2020
Bootstrap Introduction
*** Lookup display:Border-box
*** Text-align
*** relative positioning
*** Try using other approaches that are simpler before flexbox

Important!; Using this will override any subsequent changes to styling
	Often used in Bootstrap


Things to consider:
	Uses JS and Jquery dependencies
	Bootstrap 4 is the current version
Bootstrap 3 code may not work well with Bootstrap 4, caution!

1st: two things to do:
Copy and past <link> into head
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
Copy and past these  scripts for JS
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>



Starter template:

<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">

    <title>Hello, world!</title>
  </head>
  <body>
    <h1>Hello, world!</h1>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous"></script>
  </body>
</html>

Spacing
Bootstrap includes a wide range of shorthand responsive margin and padding utility classes to modify an element’s appearance.
How it works
Assign responsive-friendly margin or padding values to an element or a subset of its sides with shorthand classes. Includes support for individual properties, all properties, and vertical and horizontal properties. Classes are built from a default Sass map ranging from .25rem to 3rem.
Notation
Spacing utilities that apply to all breakpoints, from xs to xl, have no breakpoint abbreviation in them. This is because those classes are applied from min-width: 0 and up, and thus are not bound by a media query. The remaining breakpoints, however, do include a breakpoint abbreviation.
The classes are named using the format {property}{sides}-{size} for xs and {property}{sides}-{breakpoint}-{size} for sm, md, lg, and xl.
Where property is one of:
m - for classes that set margin
p - for classes that set padding
Where sides is one of:
t - for classes that set margin-top or padding-top
b - for classes that set margin-bottom or padding-bottom
l - for classes that set margin-left or padding-left
r - for classes that set margin-right or padding-right
x - for classes that set both *-left and *-right
y - for classes that set both *-top and *-bottom
blank - for classes that set a margin or padding on all 4 sides of the element
Where size is one of:
0 - for classes that eliminate the margin or padding by setting it to 0
1 - (by default) for classes that set the margin or padding to $spacer * .25
2 - (by default) for classes that set the margin or padding to $spacer * .5
3 - (by default) for classes that set the margin or padding to $spacer
4 - (by default) for classes that set the margin or padding to $spacer * 1.5
5 - (by default) for classes that set the margin or padding to $spacer * 3
auto - for classes that set the margin to auto
(You can add more sizes by adding entries to the $spacers Sass map variable.)
examples:
.mt-0 {
  margin-top: 0 !important;
}
.ml-1 {
  margin-left: ($spacer * .25) !important;
}
.px-2 {
  padding-left: ($spacer * .5) !important;
  padding-right: ($spacer * .5) !important;
}
.p-3 {
  padding: $spacer !important;
}

Rounding elements:
.btn-lg {
	border -radius: .9em;
}
Or
<img src="..." alt="..." class="rounded">
<img src="..." alt="..." class="rounded-top">
<img src="..." alt="..." class="rounded-right">
<img src="..." alt="..." class="rounded-bottom">
<img src="..." alt="..." class="rounded-left">
<img src="..." alt="..." class="rounded-circle">
<img src="..." alt="..." class="rounded-pill">
<img src="..." alt="..." class="rounded-0"> - to make square blocks
Colors:
<p class="text-primary">.text-primary</p>
<p class="text-secondary">.text-secondary</p>
<p class="text-success">.text-success</p>
<p class="text-danger">.text-danger</p>
<p class="text-warning">.text-warning</p>
<p class="text-info">.text-info</p>
<p class="text-light bg-dark">.text-light</p>
<p class="text-dark">.text-dark</p>
<p class="text-body">.text-body</p>
<p class="text-muted">.text-muted</p>
<p class="text-white bg-dark">.text-white</p>
<p class="text-black-50">.text-black-50</p>
<p class="text-white-50 bg-dark">.text-white-50</p>


Carousel - does slideshow
https://getbootstrap.com/docs/4.2/components/carousel/


Media haeding - https://getbootstrap.com/docs/4.2/components/media-object/
<div class="media">
  <img src="..." class="mr-3" alt="...">
  <div class="media-body">
    <h5 class="mt-0">Media heading</h5>
    Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.
  </div>
</div>

Shadow -  https://getbootstrap.com/docs/4.2/utilities/shadows/

Tab
https://getbootstrap.com/docs/4.2/components/navs/#javascript-behavior

Form
https://getbootstrap.com/docs/4.2/components/forms/

Input group
https://getbootstrap.com/docs/4.2/components/input-group/


8/7/2020

HTML/CSS review
	-Study CSS Box Model




Javascript lesson

	Overview
		Interpreted language
		Understand =, ==, and ===
		BOM and DOM
		Use setTimeout and setInterval, and how to "cancel" them
	Data types
		Primatives
			Boolean : true/false
			Number : 10, 3.14
			string : “Hello Codeup”
			Undefined : unassigned vars
			Null : lack of value
		Complex type:
			 Object :
			Function :
			Array :
		Number
In JS, integers and floats do not exist. They are also all number types
		String: ‘That email isn\’t valid’
			= That email isn’t valid
	Escaping characters:
		‘This is a single backslash: “\\”’
			= This is a single backslash “\”
		“Here is a number: \”two\” “
			= Here is a number: “two”
	Operators: + - * / % ()
	Logical boolean :
		&&
		||
		!

Expression
Result
true && true
true
true && false
false
false && true
false
false && false
false



Expression
Result
true || true
true
true || false
true
false || true
true
false || false
false



==
Equal in value
===
Equal in type and value
!=
Not equal in value
!==
Not equal in type and value
Exercises
	'1' + 2		12
typeof '1' + 2 	String2
6 % 4		2
'3 + 4 is ' + 3 + 4		3 + 4 is 7
// how could you make this produce the correct output?
0 < 0 		false
'false' == false	false **the expression itself is true, but false is a reserved word
true == 'true'	true
5 >= -5		true
!false || false	true
!false || false	true
true || "42"		true
!true && !false	false
6 % 5			1
typeof 'codeup' === 'string' 		true //if the equation omits the “typeof” it would be false

'codeup' === 'codeup' && 'codeup' === 'Codeup'
4 >= 0 && 1 !== '1' 	true
6 % 3 === 0		true
5 % 2 !== 0		true

Variables
var novalue; // undefined

typeof novalue; // returns "undefined"

novalue == undefined; // returns true

Constants
	const pi = 3.145;
const pi = 3.14159;

pi = 22 / 7; // ERROR!
	var n = 10 - 2 * 8 + 16 / 2;
n; // 2

var x = 5;
var y = x + 3;
y; // 8

	** You can’t change the value of a constant!

Shorthand

+=
x += 2;
x = x + 2;
-=
x -= 2;
x = x - 2;
*=
x *= 2;
x = x * 2;
/=
x /= 2;
x = x / 2;
%=
x %= 2;
x = x % 2;
var x = 1;
++x; // pre-increment, x is incremented, and the console prints out 2
x; // 2

x = 1; // put x back to where we started
x++; // post-increment, console prints out 1, and the value in x is incremented
x; // 2


Converting between strings and numbers:
	var x = 3.14;
x.toString(); // "3.14"
x.toFixed(1); // "3.1"
x.toFixed(3); // "3.140"

Number('123') // 123
Number('0.9') // 0.9
Number('asdf') // NaN

isNaN('123') // false
isNaN('abc') // true

isNaN(42) // false
isNaN(Number('abc')) // true

isNaN('123') // false
isNaN('abc') // true

isNaN(42) // false
isNaN(Number('abc')) // true

In addition to Number() there are two specialized functions that are more forgiving:
parseInt: attempts to convert a string to an integer value
parseFloat: attempts to convert a string to a floating point (i.e. decimal) value
Number('123abc') // NaN
parseInt('123abc') // 123

Working With Strings
Here are some useful functions to use when working with strings in JavaScript:
.length: property that describes the number of characters in the string.
.indexOf(char): returns the index of the specified character in the string.
.replace(find, replace): returns a copy of the string after performing a substitution.
.substring(fromIndex, toIndex): returns a subset of the original string based on the provided indices.
.toUpperCase(): returns a copy of the string in all upper case.
.toLowerCase(): returns a copy of the string in all lower case.
.trim(): returns a copy of the string with whitespace at the beginning and end removed.

